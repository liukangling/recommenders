# gpu_unit_test.yml
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#
#
# NOTE: start with cpu to make sure everything still works
#
# use variable group name
variables:
  test: 'tests/ci/run_pytest.py'
  maxnodes : 4
  reponame : 'Recommenders'
  branch   : 'azure-pipelines-bz'
  rg       : 'recommender'
  wsname   : 'RecoWS'
  branch   : 'azure-pipelines-bz'
# GPU
  vmsize   : 'STANDARD_NC6'
# CPU
# vmsize'  : 'STANDARD_D3_V2'
  dockerproc : 'gpu'

trigger: none

pr: none
#- staging 
#- master

jobs:
- job : Smoke
  pool:
    vmImage: 'ubuntu-16.04'

# vars specific to this job
  variables:
  - group: AzureKeyVaultSecrets
  - name  : 'testfolder'
    value : './tests/smoke'
  - name  : 'testmarkers'
    value : '"smoke and not spark and gpu"'
  - name  : 'junitxml'
    value : 3
  - name  : 'clustername'
    value : 'reco-nightly-gpu'
  - name  : 'expname'
    value : 'nightly_smoke_gpu'

  steps:

  - script: | 
      az login --service-principal -u $(ClientID) -p $(ClientSecret) --tenant $(TenantID)
    displayName: 'Login to Azure'

  - template: env-setup.yml # template reference

  - script: 
      python scripts/generate_conda_file.py --gpu --name reco 
    displayName: ' generate_conda_file.py'

  - script: 
      python tests/ci/submit_azureml_pytest.py --subid $(SubscriptionID) --testmarkers $(testmarkers) --clustername $(clustername) --expname $(expname) $(dockerproc) --junitxml $(junitxml) --reponame $(reponame) --branch $(branch)
    displayName: 'submit_azureml_pytest'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/test-*.xml'
    inputs:
      testResultsFiles: '**/test-*.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

- job : Integration
