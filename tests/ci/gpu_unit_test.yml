# gpu_unit_test.yml
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
#
#
# NOTE: start with cpu to make sure everything still works
#
# use variable group name
variables:
- group: AzureKeyVaultSecrets
- name  : 'test'
  value : 'tests/ci/run_pytest.py'
- name  : 'testfolder'
  value : './tests/unit'
- name  : 'testmarkers'
  value : 'not notebooks and not spark and gpu'
- name  : 'junitxml'
  value : '--junitxml=reports/test-unit.xml'
#   
#- name  : 'maxnodes'
#  value : '4'
#- name  : 'rg'
#  value : 'recommender'
#- name  : 'wsname'
#  value : 'RecoWS'
#- name  : 'clustername'
#  value : 'cluster-d3-v2'
#- name  : 'vmsize'
#           VM with GPU
#  value : 'STANDARD_NC6'
- name  : 'dockerproc'
  value : 'cpu'
#- name  : 'expname'
#  value : 'persistentAML'

#trigger:
#- azure-pipelines-bz
# 

#pr:
#- staging 
#- master
  
pool:
 vmImage: 'ubuntu-16.04'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'
  displayName: 'Use Python 3.6'

- script: | 
   az login --service-principal -u $(ClientID) -p $(ClientSecret) --tenant $(TenantID)
   
  displayName: 'Login to Azure'

- bash: |
    echo "##vso[task.prependpath]/data/anaconda/bin"
  displayName: Add Conda to PATH

- script: 
     pip install azureml-sdk
  continueOnError: true
  displayName: 'install azureml-sdk'
  
- script: 
     python scripts/generate_conda_file.py --name reco 
  displayName: ' generate_conda_file.py'

- script: |
     chmod +x scripts/*.py
     ls -al scripts
     chmod +x tests/ci/*.py
     ls -al tests/ci
     pwd
     ls -al
  displayName: 'ls'

- script: |
     python --version
     pip install azure-cli==2.0.46
     pip install --upgrade azureml-sdk[cli]
#     pip install -r tests/ci/requirements.txt
  displayName: 'install cli'

- script: 
#    python tests/ci/submitpytest.py --wsname $(workspace_name) --rg $(rg) --subid $(SubscriptionID) --testmarkers $(testmarkers)
    python tests/ci/submitpytest.py --subid $(SubscriptionID)
  displayName: 'standalone pytest test persistent'

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/test-*.xml'
  inputs:
    testResultsFiles: '**/test-*.xml'
    failTaskOnFailedTests: true
  condition: succeededOrFailed()
